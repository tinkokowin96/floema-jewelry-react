import { Canvas } from "@react-three/fiber";
import BackgroundMesh from "./backgroundmesh";
// import { Flex, Box } from "@react-three/flex";
import { useEffect, useRef, useState } from "react";
const Home = ({ collections }: any) => {
  const [noColumn, setNoColumn] = useState(5);
  const [innerWidth, setInnerWidth] = useState(window.innerWidth);

  // const canvasRef = useRef(null);
  useEffect(() => {
    function handleResize() {
      if (window.matchMedia("(max-width: 639px)").matches) {
        setNoColumn(2);
      }
      if (window.matchMedia("(min-width: 640px)").matches) {
        setNoColumn(5);
      }
      console.log(window.innerWidth);
      setInnerWidth(window.innerWidth);
    }

    window.addEventListener("resize", handleResize);

    return () => {
      window.removeEventListener("resize", handleResize);
    };
  });
  if (collections) {
    const width = innerWidth * (1 / noColumn);

    let numImage = Math.floor(collections.length / noColumn);

    numImage = collections.length % noColumn !== 0 ? numImage + 1 : numImage;

    return (
      <div className="flex bg-red-300 h-screen">
        <Canvas className="bg-gray-400">
          {collections.slice(0, numImage).map((img: string, index: number) => {
            return (
              <BackgroundMesh
                position={[0, 0, 0]}
                url={img}
                key={`1iter_${index}`}
                width={width}
              />
            );
          })}
          {/* <Flex dir="row" align="center" justify="center">
            <Box dir="row" align="center" justify="space-between">
              <Box dir="column" align="center" justify="center">
                {collections
                  .slice(0, numImage)
                  .map((img: string, index: number) => {
                    return (
                      <Box margin={0.2}>
                        <BackgroundMesh
                          position={[0, 0, 0]}
                          url={img}
                          key={`1iter_${index}`}
                          width={width}
                        />
                      </Box>
                    );
                  })}
              </Box>

              <Box dir="column" align="center" justify="center">
                {collections
                  .slice(numImage, 2 * numImage)
                  .map((img: string, index: number) => {
                    return (
                      <Box margin={0.2}>
                        <BackgroundMesh
                          position={[0, 0, 0]}
                          url={img}
                          key={`2iter_${index}`}
                          width={width}
                        />
                      </Box>
                    );
                  })}
              </Box>
            </Box>
            {2 * numImage < collections.length && (
              <Box dir="row" align="center" justify="space-between">
                <Box dir="column" align="center" justify="center">
                  {collections
                    .slice(numImage * 2, 3 * numImage)
                    .map((img: string, index: number) => {
                      return (
                        <Box margin={0.2}>
                          <BackgroundMesh
                            position={[0, 0, 0]}
                            url={img}
                            key={`3iter_${index}`}
                            width={width}
                          />
                        </Box>
                      );
                    })}
                </Box>

                <Box dir="column" align="center" justify="center">
                  {collections
                    .slice(numImage * 3, 4 * numImage)
                    .map((img: string, index: number) => {
                      return (
                        <Box margin={0.2}>
                          <BackgroundMesh
                            position={[0, 0, 0]}
                            url={img}
                            key={`4iter_${index}`}
                            width={width}
                          />
                        </Box>
                      );
                    })}
                </Box>

                <Box dir="column" align="center" justify="center">
                  {collections
                    .slice(numImage * 4, collections.length)
                    .map((img: string, index: number) => {
                      return (
                        <Box margin={0.2}>
                          <BackgroundMesh
                            position={[0, 0, 0]}
                            url={img}
                            key={`5iter_${index}`}
                            width={width}
                          />
                        </Box>
                      );
                    })}
                </Box>
              </Box>
            )}
          </Flex> */}
        </Canvas>
      </div>
    );
  }
  return <></>;
};

export default Home;
